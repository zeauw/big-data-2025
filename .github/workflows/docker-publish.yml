name: Docker Build and Publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "latest" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build-amd64:
    # Define outputs for the image tags generated by this job
    outputs:
      image_tags: ${{ steps.generate_amd64_tags.outputs.suffixed_tags }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata (amd64 base tags)
        id: meta_amd64 # Unique ID for this step
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Generate architecture-specific tags (amd64)
        id: generate_amd64_tags
        run: |
          # Get the base tags from docker/metadata-action output
          BASE_TAGS="${{ steps.meta_amd64.outputs.tags }}"
          ARCH_SUFFIX="-amd64"
          SUFFixed_TAGS=""
          # Split tags by comma and append suffix to each
          IFS=',' read -ra TAG_ARRAY <<< "$BASE_TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            if [ -n "$SUFFixed_TAGS" ]; then
              SUFFixed_TAGS+=","
            fi
            SUFFixed_TAGS+="${tag}${ARCH_SUFFIX}"
          done
          echo "Generated suffixed tags for amd64: $SUFFixed_TAGS"
          # Set the suffixed tags as an output for this step
          echo "suffixed_tags=$SUFFixed_TAGS" >> "$GITHUB_OUTPUT"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image (amd64)
        id: build-and-push_amd64 # Unique ID for this step
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.generate_amd64_tags.outputs.suffixed_tags }} # Use the new suffixed tags
          labels: ${{ steps.meta_amd64.outputs.labels }} # Labels can still use base labels
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image (amd64)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.generate_amd64_tags.outputs.suffixed_tags }}
          DIGEST: ${{ steps.build-and-push_amd64.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  build-arm64:
    # Define outputs for the image tags generated by this job
    outputs:
      image_tags: ${{ steps.generate_arm64_tags.outputs.suffixed_tags }}

    runs-on: ubuntu-24.04-arm # Using an ARM runner for native ARM build
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata (arm64 base tags)
        id: meta_arm64 # Unique ID for this step
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Generate architecture-specific tags (arm64)
        id: generate_arm64_tags
        run: |
          # Get the base tags from docker/metadata-action output
          BASE_TAGS="${{ steps.meta_arm64.outputs.tags }}"
          ARCH_SUFFIX="-arm64"
          SUFFixed_TAGS=""
          # Split tags by comma and append suffix to each
          IFS=',' read -ra TAG_ARRAY <<< "$BASE_TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            if [ -n "$SUFFixed_TAGS" ]; then
              SUFFixed_TAGS+=","
            fi
            SUFFixed_TAGS+="${tag}${ARCH_SUFFIX}"
          done
          echo "Generated suffixed tags for arm64: $SUFFixed_TAGS"
          # Set the suffixed tags as an output for this step
          echo "suffixed_tags=$SUFFixed_TAGS" >> "$GITHUB_OUTPUT"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image (arm64)
        id: build-and-push_arm64 # Unique ID for this step
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.generate_arm64_tags.outputs.suffixed_tags }} # Use the new suffixed tags
          labels: ${{ steps.meta_arm64.outputs.labels }} # Labels can still use base labels
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # Now uses the suffixed tags generated in the previous step
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image (arm64)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.generate_arm64_tags.outputs.suffixed_tags }}
          DIGEST: ${{ steps.build-and-push_arm64.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
